import os

from monstruoso.templates.ClassTemplate import ClassTemplate
from monstruoso.templates.BaseMethod import BaseMethod
from monstruoso.templates.NodeMethod import NodeMethod
from monstruoso.templates.LeafMethod import LeafMethod
from monstruoso.templates.Response import Response
from monstruoso.templates.ApplicationFile import ApplicationFile


def create_new_class(name, ancestors=['RequestPart']):
    class_template = ClassTemplate()
    class_template.name = name
    class_template.ancestors = ancestors
    class_template.methods = []
    return class_template


def create_new_base_method(name):
    base_method = BaseMethod()
    base_method.method = name
    return base_method


def create_new_node_method(name):
    node_method = NodeMethod()
    node_method.method = name
    return node_method


def create_new_leaf_method(name):
    leaf_method = LeafMethod()
    leaf_method.method = name
    return leaf_method


def create_response(name):
    response = Response()
    response.name = name
    return response


responses = []
def walk(node):
    for key, item in node.items():
        new_class = create_new_class(key.capitalize())
        for next_key, next_item in item.items():
            if type(next_item) is dict:
                node_method = create_new_node_method(next_key)
                new_class.methods.append(node_method)
            else:
                item.pop(next_key)
                leaf_method = create_new_leaf_method(next_key)
                new_class.methods.append(leaf_method)
                # add response for leaf method
                responses.append(create_response(next_key.capitalize()))

        app_file.classes.append(new_class)
        walk(item)

description_file = open("description.py")
description_string = description_file.read()
description = dict(eval(description_string))

app_file = ApplicationFile()
app_file.classes = []

new_class = create_new_class("Application", ["BasePart", "RequestPart"])
for key in description:
    new_base_method = create_new_base_method(key)
    new_class.methods.append(new_base_method)

# form autogenerated.py file
walk(description)
app_file.classes.append(new_class)
app_file.import_responses = []
for response in responses:
    app_file.import_responses.append(response.name)

classes_dir = 'classes/'
responses_dir = classes_dir + 'responses/'
requests_dir = classes_dir + 'requests/'

if not os.path.exists(classes_dir):
    os.makedirs(classes_dir)

if not os.path.exists(responses_dir):
    os.makedirs(responses_dir)

f = open(classes_dir + 'autogenerated.py', 'w+')
f.write(str(app_file))
f.close

for response in responses:
    response_filename = responses_dir + response.name + '.py'
    if not os.path.exists(response_filename):
        f = open(response_filename, 'w')
        f.write(str(response))
        f.close()

init_file = '__init__.py'

f = open(classes_dir + init_file, 'w')
f.close()

f = open(responses_dir + init_file, 'w')
f.close()